/*
Created on Sat Feb 24 11:16:01 2024

@author: Salim Mirshahi
*/

/*
# MD,FEM,AI Code for three directionally Applied electric field on the cancer cell (OR cancer cell culture)
# -------------------------------------------------------------------------
#
#   This code is an object-oriented C++ program, which is used for the theoretical
#   calculation of the degree at which ITV occurred on the cell surface
#   and the percentage of electroporated cell surface area (MCF-7 cell line)
#   for applied electric field ranging from 400 V/cm up to 1500 V/cm, based
#   on the results achieved by FEM and by MD Method.
#
# --------------------------------------------------------------------------
*/

#include <iostream>
#include <cstring>
#include <conio.h>
#include <math.h>

using namespace std;
//////////////////////////////////////////////////
class AEF {
	public:
		int  AEF_X, AEF_Y, AEF_Z;
    void AEFs (int L, int W,int H)
			{AEF_X = L, AEF_Y = W, AEF_Z = H;}

//functions to Initialize equations
//ITV=6701*sin⁡(0.000281X–0.002243), 400 < X < 1500 // Where X is the applied electric field or AEF in three dimensions.
	int MaxITV_AEF_X()
      {return 6701*sin(0.000281*AEF_X-0.002243);}
	int MaxITV_AEF_Y()
      {return 6701*sin(0.000281*AEF_Y-0.002243);}
	int MaxITV_AEF_Z()
      {return 6701*sin(0.000281*AEF_Z-0.002243);}

//The relationship between applied electric field (X) and the critical angle (θc) was formulated as:
//θ_c = 111.3*sin⁡(0.003311X-1.943)+92.95*sin⁡(0.006613X-2.106)+48.38*sin(0.008088X-5.824), 400 < X < 1500	(6)
    int FEM_CA_AEF_X()
        {return 111.3*sin(0.003311*AEF_X-1.943)+92.95*sin(0.006613*AEF_X-2.106)+48.38*sin(0.008088*AEF_X-5.824);}
    int FEM_CA_AEF_Y()
        {return 111.3*sin(0.003311*AEF_Y-1.943)+92.95*sin(0.006613*AEF_Y-2.106)+48.38*sin(0.008088*AEF_Y-5.824);}
    int FEM_CA_AEF_Z()
        {return 111.3*sin(0.003311*AEF_Z-1.943)+92.95*sin(0.006613*AEF_Z-2.106)+48.38*sin(0.008088*AEF_Z-5.824);}

//the relationship between the applied electric field (X) and electroporated cell surface area (S) was as follows:
//S = 93.52*sin(0.003003X-1.741)+56.68*sin⁡(0.00592X-1.447)+23.28*sin(0.007647X-6.261), 400 < X < 1500	(7)
        int FEM_ECSA_AEF_X()
			{return 93.52*sin(0.003003*AEF_X-1.741)+56.68*sin(0.00592*AEF_X-1.447)+23.28*sin(0.007647*AEF_X-6.261);}
        int FEM_ECSA_AEF_Y()
			{return 93.52*sin(0.003003*AEF_Y-1.741)+56.68*sin(0.00592*AEF_Y-1.447)+23.28*sin(0.007647*AEF_Y-6.261);}
        int FEM_ECSA_AEF_Z()
			{return 93.52*sin(0.003003*AEF_Z-1.741)+56.68*sin(0.00592*AEF_Z-1.447)+23.28*sin(0.007647*AEF_Z-6.261);}

//Moreover, the relationship between applied electric field (X) and the critical angle (θc) was based on this formula:
//θ_c = 122.3*sin(0.003425X-2.05)+106.3*sin⁡(0.006472X-1.97)+52.49*sin(0.007981X-5.925), 400 < X < 1500	(8)
        int MD_CA_AEF_X()
			{return 122.3*sin(0.003425*AEF_X-2.05)+1063*sin(0.006472*AEF_X-1.97)+52.49*sin(0.007981*AEF_X-5.925);}
        int MD_CA_AEF_Y()
			{return 122.3*sin(0.003425*AEF_Y-2.05)+1063*sin(0.006472*AEF_Y-1.97)+52.49*sin(0.007981*AEF_Y-5.925);}
        int MD_CA_AEF_Z()
			{return 122.3*sin(0.003425*AEF_Z-2.05)+1063*sin(0.006472*AEF_Z-1.97)+52.49*sin(0.007981*AEF_Z-5.925);}

//and the relationship between the applied electric field (X) and electroporated cell surface area (S) was shown here.
//S = 97.78*sin(0.003004X-1.741)+62.88*sin(0.005941X-1.503)+27.32*sin(0.007487X-6.376), 400 < X < 1500	(9)
        int MD_ECSA_AEF_X()
			{return 97.78*sin(0.003004*AEF_X-1.741)+62.88*sin(0.005941*AEF_X-1.503)+27.32*sin(0.007487*AEF_X-6.376);}
        int MD_ECSA_AEF_Y()
			{return 97.78*sin(0.003004*AEF_Y-1.741)+62.88*sin(0.005941*AEF_Y-1.503)+27.32*sin(0.007487*AEF_Y-6.376);}
        int MD_ECSA_AEF_Z()
			{return 97.78*sin(0.003004*AEF_Z-1.741)+62.88*sin(0.005941*AEF_Z-1.503)+27.32*sin(0.007487*AEF_Z-6.376);}

//The relationship between applied electric field and the critical angle (θc) for different PRs is formulated using curve fitting based on data extracted from Table 3, as follows:
//PR= 2, CA = 5.3×10^(-6) X^3- 0.01134X^2+8.06X-1865  for 500 < X < 800       	(9)
        int PR2_FEM_CA_AEF_X()
			{return 5.3*pow(10,-6)*pow(AEF_X,3)-0.01134*pow(AEF_X,2)+8.06*AEF_X-1865;}
        int PR2_FEM_CA_AEF_Y()
			{return 5.3*pow(10,-6)*pow(AEF_Y,3)-0.01134*pow(AEF_Y,2)+8.06*AEF_Y-1865;}
        int PR2_FEM_CA_AEF_Z()
			{return 5.3*pow(10,-6)*pow(AEF_Z,3)-0.01134*pow(AEF_Z,2)+8.06*AEF_Z-1865;}

//PR= 3, CA = 5.481×10^(-6) X^3-0.01161X^2+8.217X-1892 for 500 < X < 800       	(10)  //Where X is the applied electric field.
        int PR3_FEM_CA_AEF_X()
			{return 5.481*pow(10,-6)*pow(AEF_X,3)-0.01161*pow(AEF_X,2)+8.217*AEF_X-1892;}
        int PR3_FEM_CA_AEF_Y()
			{return 5.481*pow(10,-6)*pow(AEF_Y,3)-0.01161*pow(AEF_Y,2)+8.217*AEF_Y-1892;}
        int PR3_FEM_CA_AEF_Z()
			{return 5.481*pow(10,-6)*pow(AEF_Z,3)-0.01161*pow(AEF_Z,2)+8.217*AEF_Z-1892;}

//The relationship between the applied electric field and electroporated cell surface area (ECSA) for different PRs was formulated as following as well:
//PR= 2, ECSA = 1.481×10^(-6) X^3-0.003257X^2+2.445X- 592   for 500 < X < 800	(11)
        int PR2_FEM_ECSA_AEF_X()
			{return 1.481*pow(10,-6)*pow(AEF_X,3)-0.003257*pow(AEF_X,2)+2.445*AEF_X-592;}
        int PR2_FEM_ECSA_AEF_Y()
			{return 1.481*pow(10,-6)*pow(AEF_Y,3)-0.003257*pow(AEF_Y,2)+2.445*AEF_Y-592;}
        int PR2_FEM_ECSA_AEF_Z()
			{return 1.481*pow(10,-6)*pow(AEF_Z,3)-0.003257*pow(AEF_Z,2)+2.445*AEF_Z-592;}

//PR= 3, ECSA = 1.111×10^(-6) X^3-0.002471X^2+1.892X– 462.1  for 500 < X < 800	(12)
        int PR3_FEM_ECSA_AEF_X()
			{return 1.111*pow(10,-6)*pow(AEF_X,3)-0.002471*pow(AEF_X,2)+1.892*AEF_X-462.1;}
        int PR3_FEM_ECSA_AEF_Y()
			{return 1.111*pow(10,-6)*pow(AEF_Y,3)-0.002471*pow(AEF_Y,2)+1.892*AEF_Y-462.1;}
        int PR3_FEM_ECSA_AEF_Z()
			{return 1.111*pow(10,-6)*pow(AEF_Z,3)-0.002471*pow(AEF_Z,2)+1.892*AEF_Z-462.1;}

//PR= 4, ECSA = 1.111×10^(-6) X^3-0.002471X^2+1.892X–462.1  for 500 < X < 800	(13)
        int PR4_FEM_ECSA_AEF_X()
			{return 1.111*pow(10,-6)*pow(AEF_X,3)-0.002471*pow(AEF_X,2)+1.892*AEF_X-462.1;}
        int PR4_FEM_ECSA_AEF_Y()
			{return 1.111*pow(10,-6)*pow(AEF_Y,3)-0.002471*pow(AEF_Y,2)+1.892*AEF_Y-462.1;}
        int PR4_FEM_ECSA_AEF_Z()
			{return 1.111*pow(10,-6)*pow(AEF_Z,3)-0.002471*pow(AEF_Z,2)+1.892*AEF_Z-462.1;}
};
/////////////////////////////////////////////
int main()
{
    double Cell_radius = 12.5*pow(10,-6);
 	cout << "Cell_radius = "                << Cell_radius <<"\n";

    double Total_Cell_Surface_Area = 4*3.14*pow(Cell_radius,2);
 	cout << "Total_Cell_Surface_Area = "    << Total_Cell_Surface_Area <<"\n";

	AEF ob1 ;
	ob1.AEFs (600, 700, 1500);
	AEF ob2 ;
	ob2.AEFs (600, 700, 1500);
        AEF ob3 ;
	ob3.AEFs (600, 700, 1500);
        AEF ob4 ;
	ob4.AEFs (600, 700, 1500);
	AEF ob5 ;
	ob5.AEFs (600, 700, 1500);
	AEF ob6 ;
	ob6.AEFs (600, 700, 1500);
        AEF ob7 ;
	ob7.AEFs (600, 700, 1500);
        AEF ob8 ;
	ob8.AEFs (600, 700, 1500);
	AEF ob9 ;
	ob9.AEFs (600, 700, 1500);
	AEF ob10 ;
	ob10.AEFs (600, 700, 1500);
	AEF ob11 ;
	ob11.AEFs (600, 700, 1500);
	AEF ob12 ;
	ob12.AEFs (600, 700, 1500);
        AEF ob13 ;
	ob13.AEFs (600, 700, 1500);
	AEF ob14 ;
	ob14.AEFs (600, 700, 1500);
        AEF ob15 ;
	ob15.AEFs (600, 700, 1500);
        AEF ob16 ;
	ob16.AEFs (600, 700, 1500);
	AEF ob17 ;
	ob17.AEFs (600, 700, 1500);
	AEF ob18 ;
	ob18.AEFs (600, 700, 1500);
        AEF ob19 ;
	ob19.AEFs (600, 700, 1500);
        AEF ob20 ;
	ob20.AEFs (600, 700, 1500);
	AEF ob21 ;
	ob21.AEFs (600, 700, 1500);
	AEF ob22 ;
	ob22.AEFs (600, 700, 1500);
	AEF ob23 ;
	ob23.AEFs (600, 700, 1500);
	AEF ob24 ;
	ob24.AEFs (600, 700, 1500);
        AEF ob25 ;
	ob25.AEFs (600, 700, 1500);
	AEF ob26 ;
 	ob26.AEFs (600, 700, 1500);
        AEF ob27 ;
	ob27.AEFs (600, 700, 1500);
        AEF ob28 ;
	ob28.AEFs (600, 700, 1500);
	AEF ob29 ;
	ob29.AEFs (600, 700, 1500);
	AEF ob30 ;
	ob30.AEFs (600, 700, 1500);

 	cout << "MaxITV_AEF_X = "              << ob1.MaxITV_AEF_X() <<"\n";
 	cout << "MaxITV_AEF_Y = "              << ob2.MaxITV_AEF_Y() <<"\n";
 	cout << "MaxITV_AEF_Z = "              << ob3.MaxITV_AEF_Z() <<"\n";

  	cout << "FEM_CA_AEF_X = "              << ob4.FEM_CA_AEF_X() <<"\n";
  	cout << "FEM_CA_AEF_Y = "              << ob5.FEM_CA_AEF_Y() <<"\n";
  	cout << "FEM_CA_AEF_Z = "              << ob6.FEM_CA_AEF_Z() <<"\n";

  	cout << "FEM_ECSA_AEF_X = "            << ob7.FEM_ECSA_AEF_X() <<"\n";
  	cout << "FEM_ECSA_AEF_Y = "            << ob8.FEM_ECSA_AEF_Y() <<"\n";
  	cout << "FEM_ECSA_AEF_Z = "            << ob9.FEM_ECSA_AEF_Z() <<"\n";

  	cout << "MD_CA_AEF_X = "               << ob10.MD_CA_AEF_X() <<"\n";
  	cout << "MD_CA_AEF_Y = "               << ob11.MD_CA_AEF_Y() <<"\n";
  	cout << "MD_CA_AEF_Z = "               << ob12.MD_CA_AEF_Z() <<"\n";

  	cout << "MD_ECSA_AEF_X = "             << ob13.MD_ECSA_AEF_X() <<"\n";
  	cout << "MD_ECSA_AEF_Y = "             << ob14.MD_ECSA_AEF_Y() <<"\n";
  	cout << "MD_ECSA_AEF_Z = "             << ob15.MD_ECSA_AEF_Z() <<"\n";

  	cout << "PR2_FEM_CA_AEF_X = "          << ob16.PR2_FEM_CA_AEF_X() <<"\n";
  	cout << "PR2_FEM_CA_AEF_Y = "          << ob17.PR2_FEM_CA_AEF_Y() <<"\n";
  	cout << "PR2_FEM_CA_AEF_Z = "          << ob18.PR2_FEM_CA_AEF_Z() <<"\n";

  	cout << "PR3_FEM_CA_AEF_X = "          << ob19.PR3_FEM_CA_AEF_X() <<"\n";
  	cout << "PR3_FEM_CA_AEF_Y = "          << ob20.PR3_FEM_CA_AEF_Y() <<"\n";
  	cout << "PR3_FEM_CA_AEF_Z = "          << ob21.PR3_FEM_CA_AEF_Z() <<"\n";

  	cout << "PR2_FEM_ECSA_AEF_X = "        << ob22.PR2_FEM_ECSA_AEF_X() <<"\n";
  	cout << "PR2_FEM_ECSA_AEF_Y = "        << ob23.PR2_FEM_ECSA_AEF_Y() <<"\n";
  	cout << "PR2_FEM_ECSA_AEF_Z = "        << ob24.PR2_FEM_ECSA_AEF_Z() <<"\n";

  	cout << "PR3_FEM_ECSA_AEF_X = "        << ob25.PR3_FEM_ECSA_AEF_X() <<"\n";
  	cout << "PR3_FEM_ECSA_AEF_Y = "        << ob26.PR3_FEM_ECSA_AEF_Y() <<"\n";
  	cout << "PR3_FEM_ECSA_AEF_Z = "        << ob27.PR3_FEM_ECSA_AEF_Z() <<"\n";

  	cout << "PR4_FEM_ECSA_AEF_X = "        << ob28.PR4_FEM_ECSA_AEF_X() <<"\n";
  	cout << "PR4_FEM_ECSA_AEF_Y = "        << ob29.PR4_FEM_ECSA_AEF_Y() <<"\n";
  	cout << "PR4_FEM_ECSA_AEF_Z = "        << ob30.PR4_FEM_ECSA_AEF_Z() <<"\n";

	getch();
}
